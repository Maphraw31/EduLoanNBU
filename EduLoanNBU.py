import discord
from discord.ext import commands, tasks
import asyncio
import json
import os
from datetime import datetime, timedelta

TOKEN = "MTM1NjY1MTM4MzI1NTk5MDQ5NA.Gbcrz_.W8n8fjLwU4hCupKvNHQn62y21MMwOJstT6fgjs"
CHANNEL_ID = 1356918369026048091  # ‡πÉ‡∏™‡πà Channel ID ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ö‡∏≠‡∏ó‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
db_file = "loan_data.json"
if not os.path.exists(db_file):
    with open(db_file, "w") as f:
        json.dump({}, f)

bot = commands.Bot(command_prefix="!")

# ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå
def load_data():
    with open(db_file, "r") as f:
        return json.load(f)

# ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
def save_data(data):
    with open(db_file, "w") as f:
        json.dump(data, f, indent=4)

# üìå ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢ (0.52% ‡∏ï‡πà‡∏≠‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå)
def calculate_interest(amount, weeks):
    return round(amount * (0.52 / 100) * weeks, 2)

# üìå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Ç‡∏≠‡∏Å‡∏π‡πâ‡πÄ‡∏á‡∏¥‡∏ô
@bot.command()
async def loan(ctx, amount: int):
    user_id = str(ctx.author.id)
    data = load_data()
    
    if user_id not in data:
        data[user_id] = {"loan": 0, "due_date": None}
    
    data[user_id]["loan"] += amount
    data[user_id]["due_date"] = (datetime.now() + timedelta(weeks=1)).strftime("%Y-%m-%d")
    save_data(data)
    
    await ctx.send(f"‚úÖ {ctx.author.mention} ‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡πÄ‡∏á‡∏¥‡∏ô {amount} ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! (‡∏ä‡∏≥‡∏£‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 1 ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå)")

# üìå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏á‡∏¥‡∏ô
@bot.command()
async def pay(ctx, amount: int):
    user_id = str(ctx.author.id)
    data = load_data()
    
    if user_id not in data or data[user_id]["loan"] == 0:
        await ctx.send("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏ô‡∏µ‡πâ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ä‡∏≥‡∏£‡∏∞!")
        return
    
    data[user_id]["loan"] -= amount
    if data[user_id]["loan"] <= 0:
        data[user_id]["loan"] = 0
        data[user_id]["due_date"] = None
    save_data(data)
    
    await ctx.send(f"üí∞ {ctx.author.mention} ‡πÑ‡∏î‡πâ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô {amount} ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï! ‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: {data[user_id]['loan']} ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï")

# üìå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏ä‡πá‡∏Å‡∏¢‡∏≠‡∏î‡∏´‡∏ô‡∏µ‡πâ
@bot.command()
async def debt(ctx):
    user_id = str(ctx.author.id)
    data = load_data()
    
    if user_id not in data or data[user_id]["loan"] == 0:
        await ctx.send("‚úÖ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏ô‡∏µ‡πâ‡∏Ñ‡πâ‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞!")
        return
    
    loan_amount = data[user_id]["loan"]
    due_date = data[user_id]["due_date"]
    await ctx.send(f"üìå {ctx.author.mention} ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏´‡∏ô‡∏µ‡πâ‡∏Ñ‡πâ‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞ {loan_amount} ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï (‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {due_date})")

# üìå ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏´‡∏ô‡∏µ‡πâ‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå
@tasks.loop(hours=168)  # 168 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á = 7 ‡∏ß‡∏±‡∏ô
async def debt_reminder():
    await bot.wait_until_ready()
    channel = bot.get_channel(CHANNEL_ID)
    if channel:
        data = load_data()
        for user_id, info in data.items():
            if info["loan"] > 0:
                user = await bot.fetch_user(int(user_id))
                if user:
                    weeks = (datetime.now() - datetime.strptime(info["due_date"], "%Y-%m-%d")).days // 7
                    interest = calculate_interest(info["loan"], weeks)
                    total_due = info["loan"] + interest
                    await channel.send(f"‚è≥ {user.mention} ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ä‡∏≥‡∏£‡∏∞‡∏´‡∏ô‡∏µ‡πâ {total_due} ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï ‡∏£‡∏ß‡∏°‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢ {interest} ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï!")

@bot.event
async def on_ready():
    print(f"‚úÖ ‡∏ö‡∏≠‡∏ó‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå: {bot.user}")
    debt_reminder.start()

bot.run(os.getenv('TOKEN'))
